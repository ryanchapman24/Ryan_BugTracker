@model Ryan_BugTracker.Models.Ticket
@using Microsoft.AspNet.Identity;

@{
    ViewBag.Title = "Details";
}
<link href="~/Content/jQuery.FileUpload/css/jquery.fileupload.css" rel="stylesheet" />
<link href="~/Content/jQuery.FileUpload/css/jquery.fileupload-ui.css" rel="stylesheet" />

<div class="widget">
    <div class="widget-header">
        <h3>Ticket Details</h3>
    </div>
    <div class="widget-content">
        <div>
            <dl class="dl-horizontal">
                <dt>
                    @Html.DisplayNameFor(model => model.Created)<br /><br />
                </dt>

                <dd>
                    @Model.Created.ToString("d")
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Updated)<br /><br />
                </dt>

                <dd>
                    @if (Model.Updated.HasValue)
                    {
                        @Model.Updated@*.Value.ToString("d")*@
                    }
                </dd>

                <dt>
                    Ticket Name<br /><br />
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Title)
                </dd>

                <dt>
                    Description<br /><br />
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Body)
                </dd>

                <dt>
                    Author<br /><br />
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.AuthorUser.DisplayName)
                </dd>

                <dt>
                    Project<br /><br />
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Project.Title)
                </dd>

                <dt>
                    Type<br /><br />
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.TicketType.Name)
                </dd>

                <dt>
                    Priority<br /><br />
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.TicketPriority.Name)
                </dd>

                <dt>
                    Assignment<br /><br />
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.AssignedToUser.DisplayName)
                </dd>

                <dt>
                    Status<br /><br />
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.TicketStatus.Name)
                </dd>

                <dt>
                    Attachment(s)<br /><br />
                </dt>

                <dd>
                    @foreach (var attachment in Model.TicketAttachments.Reverse())
                    {
                        var fileDl = "/TicketAttachments/" + attachment.TicketId + "/" + attachment.FileUrl;
                        <img src="/assets/img/Document.png" /><a href="@fileDl">@attachment.FileUrl</a> if (User.IsInRole("Administrator")) { <a href="@Url.Action("DeleteAttachment", new { id = attachment.Id, ticketid = Model.Id })"><img style="width: 10px; margin-left: 10px" src="/assets/ico/delete1.ico" /></a> }<p style="font-size: 10px; margin-bottom: 20px; margin-left: 35px"><em>by <span style="color: #428BCA">@attachment.AuthorUser.DisplayName</span> on @attachment.Created.ToString("d")</em></p>
                    }
                </dd>
            </dl>
        </div>
        @{
            var aau = false;           
            var acu = Model.AuthorUserId.Equals(User.Identity.GetUserId());
            if (Model.AssignedToUserId != null) { aau = Model.AssignedToUserId.Equals(User.Identity.GetUserId());  }

            if (User.IsInRole("Administrator") || User.IsInRole("Project Manager") || User.IsInRole("Submitter") || (User.IsInRole("Developer") && (aau || acu)))
            {
                <!--Create Attachments-->
                using (Html.BeginForm("CreateAttachment", "Tickets", FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    @Html.AntiForgeryToken()
                    <div class="col-md-offset-2">
                        <div class="form-group">
                            <input type="hidden" name="TicketId" value="@Model.Id" />
                            <input style="" type="file" name="files" id="files" multiple />
                        </div>
                        <button type="submit" class="btn btn-primary" style="">Attach</button>
                    </div>
                }
            }
        }
    </div>
    <div class="widget-footer">
        @{ 
            var cau = false;           
            var ccu = Model.AuthorUserId.Equals(User.Identity.GetUserId());
            if (Model.AssignedToUserId != null) { cau = Model.AssignedToUserId.Equals(User.Identity.GetUserId()); }

            if (User.IsInRole("Administrator") || User.IsInRole("Project Manager") || User.IsInRole("Submitter") || (User.IsInRole("Developer") && (cau || ccu)))
            {
            <!-- Create Comments -->
            using (Html.BeginForm("CreateComment", "Tickets", FormMethod.Post))
                {
                    @Html.AntiForgeryToken()
                    <div style="padding: 20px">
                        <h4 style="">Leave a Comment:</h4>           
                        <form role="form" action="">            
                            <div class="form-group">
                                <input type="hidden" name="TicketId" value="@Model.Id" />
                                <textarea class="form-control" required data-validation-required-message="This field can't be left blank" name="Body" rows="3"></textarea>
                             </div>
                            <button type="submit" class="btn btn-primary" style="">Submit</button>
                        </form>
                    </div>
                    <hr />
                }
            }
        }
        <p style="text-align: center">@Html.ActionLink("Back to List", "Index", "Home")</p>
    </div>
</div>


<!-- WIDGET SCROLLING -->

@if (Model.TicketComments.Count() != 0)
{
    <div style="max-height: 500px">
        <div class="widget widget-scrolling">
            <div class="widget-header">
                <h3>Comments</h3>
                <div class="widget-header-toolbar">
                    <div class="label label-info" style="font-size: 12px">Total (@Model.TicketComments.Count())</div>
                </div>
            </div>
            <div class="widget-content" style="padding-left: 20px">
                @foreach (var comment in Model.TicketComments.Reverse())
                {
                    <div class="media">
                        <a class="pull-left" href="#">
                            <img class="media-object" src="~/assets/img/comment.png" style="height: 40px; width: 40px; margin-right: 15px" alt="" />
                        </a>
                        <div class="media-body">
                            <h4 class="media-heading">
                                <strong>@comment.AuthorUser.DisplayName</strong>
                                <small>@comment.Created.ToString("g") EST</small>
                            </h4>
                            @Html.Raw(comment.Body)

                            @if (User.IsInRole("Administrator"))
                            {
                                <p style="margin-top: 15px; font-size: 12px; font-weight: 400">@Html.ActionLink("Edit", "EditComment", new { id = comment.Id, ticketid = Model.Id }) | @Html.ActionLink("Delete", "DeleteComment", new { id = comment.Id, ticketid = Model.Id }) </p>
                            }
                        </div>
                    </div>
                    <hr />
                }
            </div>
        </div>
    </div>
}

<!-- END WIDGET SCROLLING -->